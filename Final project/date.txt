module IMP-SYNTAX
  syntax AExp ::= Int // builtin
                | Id  // builtin
                > left:
                  AExp "*" AExp [left]
                | AExp "/" AExp [left]
                > left:
                  AExp "+" AExp [left, strict]
                | AExp "-" AExp [left]
                | "(" AExp ")"  [bracket]
###
//
  syntax BExp ::= Bool // builtin
                | "!" BExp
                | BExp "&&" BExp [non-assoc]
                | AExp "<=" AExp [strict]
                | AExp "<"  AExp
                | "(" BExp ")" [bracket]

  syntax Block ::= "{" Stmt "}"
                 | "{" "}"

  syntax Stmt ::= "int" Id ";"
                |Id "=" AExp ";"  [strict(2)]
                | "if" BExp Block "else" Block [strict(1)]
                | "while" BExp Block
                > Stmt Stmt [right]
endmodule

module IMP
  imports IMP-SYNTAX

  syntax KResult ::= Bool | Int

  configuration <k> $PGM:Stmt </k>
                <env> .Map </env>

  rule I1:Int <= I2:Int => I1 <=Int I2
  rule I1:Int + I2:Int => I1 +Int I2

  rule S1:Stmt S2:Stmt => S1 ~> S2

  rule <k> int X:Id ; => . ...</k>
       <env> M:Map (.Map => X |-> 0) </env>
       when notBool(X in keys(M))

  rule <k> (X:Id = V:Int ; => .)  ...</k>
       <env>... X |-> (_ => V)  ...</env>

  rule <k> (X:Id => V) ...</k>
       <env>... X |-> V:Int ...</env>

  rule if true  B1:Block else B2:Block => B1 
  rule if false B1:Block else B2:Block => B2 

  rule { S:Stmt } => S
  rule { } => .

  rule while B:BExp { S:Stmt } =>
       if B { S while B { S } } else { }
endmodul